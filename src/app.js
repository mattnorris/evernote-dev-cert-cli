#!/usr/bin/env node

/**
 * Lists all notebooks in Evernote users's account and creates a new note.
 */

var argv = require('yargs')
  .alias('c', 'create')
  .alias('d', 'disclaimer')
  .alias('g', 'guid')
  .alias('l', 'list')
  .argv;
var fs = require('fs');
var colors = require('colors');
var config = require('../config.json');
var crypto = require('crypto');
var Evernote = require('evernote').Evernote;
var path = require('path');
var util = require('util');

var xml2js = require('xml2js');
var parseString = require('xml2js').parseString;

require('es6-promise').polyfill();

//
// Functions
//

/**
 * Creates a sample note in the NoteStore.
 */
var createNote = function() {
  // Creates a new note.
  var note = new Evernote.Note();
  var filename = __filename.split(path.sep).pop();
  note.title = util.format('Note generated by %s', filename);

  // Creates attachment resource containing the file's binary data,
  // an MD5 hash of the file's binary data, and the file's MIME type.
  var image = fs.readFileSync(path.join(__dirname, '../input/', 'wraithmonster.png'));
  var hash = image.toString('base64');

  var data = new Evernote.Data();
  data.size = image.length;
  data.bodyHash = hash;
  data.body = image;

  resource = new Evernote.Resource();
  resource.mime = 'image/png';
  resource.data = data;

  // Adds the resource to the note's list of resources.
  note.resources = [resource];

  // Displays the resource as part of the note's ENML content.
  var md5 = crypto.createHash('md5');
  md5.update(image);
  hashHex = md5.digest('hex');

  var authorName = process.env.npm_package_author_name || '@mattnorrisme';

  // Constructs the note's content.
  // See http://dev.evernote.com/documentation/cloud/chapters/ENML.php
  // for full ENML specification.
  note.content = (
    '<?xml version="1.0" encoding="UTF-8"?>' +
    '<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">' +
    '<en-note>' +
      util.format('<p>Note generated by <i>%s</i>. Authored by <a href="%s">%s</a>.</p>',
        filename,
        util.format('http://twitter.com/%s', authorName),
        authorName) +
      util.format('<en-media type="image/png" hash="%s"/>', hashHex) +
    '</en-note>'
  );

  // Uploads note to the NoteStore.
  noteStore.createNote(note, function(err, createdNote) {
    console.log(util.format('%s with ID %s and %d attachment(s).',
      'Created a new note'.green,
      createdNote.guid.bold,
      createdNote.resources.length));
    console.log();
  });
}

var addDisclaimer = function(guid) {
  var disclaimerText = "This note and any files transmitted with it are confidential and intended solely for the use of the individual or entity to whom they are addressed. If you have received this note in error please notify the system manager. This note contains confidential information and is intended only for the individual named. If you are not the named addressee you should not disseminate, distribute or copy this note. Please notify the sender immediately by e-mail if you have received this note by mistake and delete this note from your system. If you are not the intended recipient you are notified that disclosing, copying, distributing or taking any action in reliance on the contents of this information is strictly prohibited.";

  _getNoteP(guid).then(function(note) {

    note.content = note.content.replace('<en-note>',
      (
        '<en-note>' +
          util.format('<blockquote>%s</blockquote>', disclaimerText) +
          '<hr/>'
      )
    );

    console.log(note.content);

    // parseString(note.content, function(err, result) {
    //   if (err) {
    //     console.error(err.red);
    //     console.error();
    //   }
    //   else {
    //
    //     console.log(result);
    //     // console.dir(result['en-note'].p);
    //
    //     var updatedNote = result;
    //     var builder = new xml2js.Builder({docType: {ext: "http://xml.evernote.com/pub/enml2.dtd"}});
    //     var xml = builder.buildObject(updatedNote);
    //     // console.log(xml);
    //     note_.content = xml;
    //     console.log(note_.content);
    //     noteStore.updateNote(authToken, note_, function(err, updatedNote) {
    //       console.error(err);
    //       console.log(updatedNote)
    //     });
    //   }
    // });
  });
}

var _getNoteP = function(guid) {
  return new Promise(function(resolve, reject) {
    noteStore.getNote(authToken, guid, true, false, false, false, function(err, note) {
      if (note) {
        resolve(note);
      }
      else {
        reject(err);
      }
    });
  });
}

/**
 * Gets the note with the specified GUID.
 * @param  {[type]} guid [description]
 * @return {[type]}      [description]
 */
var getNote = function(guid) {
  //noteStore.getNote(userInfo.authToken, guid, withContent, withResourcesData, withResourcesRecognition, withResourcesAlternateData,
  noteStore.getNote(authToken, guid, true, false, false, false, function(err, note) {
    // if (err) {
    //   console.error('Error:', err.red)
    // }
    if (note) {
      console.log(util.format('%s with ID %s', 'Retrieved note'.green, note.guid.bold));
      // console.log(note.content);
      console.log();
    }
    else {
      console.error(util.format('%s, the note with ID %s %s.',
        "I'm sorry".red,
        guid.bold,
        'could not be found'));
      console.error('Please try another ID.');
      console.error();
    }
  });
}

/**
 * Lists user's notebooks.
 */
var listNotebooks = function() {
  noteStore.listNotebooks(function(err, notebooks) {
    userStore.getUser(function(err, user) {
      console.log(util.format('%s has %d notebooks:', user.username.bold, notebooks.length));
      console.log();
      notebooks.forEach(function(notebook, index) {
        console.log(util.format('\t%s. %s', index + 1, notebook.name));
      });
      console.log();
    });
  });
}

/**
 * Prints help.
 */
var printHelp = function() {
  console.error(util.format("%s, I didn't recognize any valid options.", "I'm sorry".red));
  console.error('Please try again.');
  console.error();
  process.exit();
}

//
// Script
//

var authToken = config.DEVELOPER_TOKEN || undefined;
if (!authToken) {
  console.error("I'm sorry. ".red +
    "I can't proceed without your " + "DEVELOPER_TOKEN.".bold);
  console.error();
  console.error(util.format("\t1. Sign up for a sandbox account at %s",
    'https://sandbox.evernote.com/Registration.action'.underline));
  console.error(util.format("\t2. Get your %s at %s",
    'DEVELOPER_TOKEN'.bold,
    'https://sandbox.evernote.com/api/DeveloperToken.action'.underline));
  console.error(util.format("\t3. Copy/paste it into %s",
    'config.template.js'.yellow));
  console.error(util.format("\t4. Rename %s to %s",
    'config.template.js'.yellow, 'config.js'.green));
  console.error(util.format("\t5. Run this script again."));
  console.error();
  process.exit();
}
var client = new Evernote.Client({token: authToken, sandbox: true});
var userStore = client.getUserStore();

userStore.checkVersion(
  "Evernote Certified Developer Program Exercise",
  Evernote.EDAM_VERSION_MAJOR,
  Evernote.EDAM_VERSION_MINOR,
  function(err, versionOK) {
    if (!versionOK) {
      console.error(util.format("%s The %s is not up-to-date.",
        "I'm sorry.".red, "Evernote SDK".bold));
      console.error("Please run the following before running this script again:");
      console.error();
      console.error('\tnpm prune && npm install');
      console.error();
      process.exit();
    }
  }
);

var noteStore = client.getNoteStore();

// TODO: Notice about `npm start` doesn't work with args.
if (Object.keys(argv).length <=2 && !argv._.length) {
  printHelp();
}
else {
  var argvValid = false;

  // Lists notebooks.
  if (argv.l) {
    listNotebooks();
    argvValid = true;
  }
  // Gets the note with the provided GUID.
  if (argv.g && argv.g !== true) {
    console.log(util.format('%s with ID %s...', 'Getting note'.yellow, argv.g.bold));
    getNote(argv.g);
    argvValid = true;
  }
  // Creates a new note.
  if (argv.c) {
    createNote();
    argvValid = true;
  }
  // Adds disclaimer to note.
  if (argv.d && argv.d !== true) {
    // TODO: Reuse getNote
    addDisclaimer(argv.d);
    argvValid = true;
  }

  // Prints help if no valid options were provided.
  if (!argvValid) {
    printHelp();
  }
}
